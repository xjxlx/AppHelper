

allprojects {
		repositories {
			...
			maven { url 'https://jitpack.io' }
		}
	}


	dependencies {
    	        implementation 'com.gitee.xjxlx:apphelper:Tag'
    	}


使用步骤：
1：如果使用音乐播放器的时候，必须要加入服务的配置，否则不会播放
<!-- 音乐播放器的服务 -->
        <service
            android:name="com.android.helper.utils.media.audio.AudioService"
            android:enabled="true"
            android:exported="false" />

2：如果要收集App的异常信息的话，必须要给予应用读写的权限，否则就会导致无法正常的存入日志
        String[] strings = {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE};

        RxPermissionsUtil permissionsUtil = new RxPermissionsUtil(mContext, strings);
        permissionsUtil.setAllPermissionListener(new AllPermissionsListener() {
            @Override
            public void onRxPermissions(boolean havePermission, Permission permission) {
                LogUtil.e("是否拥有读写权限：" + havePermission);
            }
        });


3：加入对应的权限

    <!-- SDK卡权限 -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <!--前台服务的权限-->
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <!-- 网络状态权限 -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <!-- 电池优化权限 -->
    <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
    <!--通知栏权限-->
    <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY" />
    <!--设置振动， 需要添加权限-->
    <uses-permission android:name="android.permission.VIBRATE" />


    文件上传：
    java:
    RequestBody requestFile =
                    RequestBody.create(MediaType.parse("multipart/form-data"), file);
            //和后端约定好Key，这里的partName是用file
            MultipartBody.Part body =
                    MultipartBody.Part.createFormData("file", file.getName(), requestFile);

    kotlin:
       val requestFile: RequestBody = RequestBody.create("multipart/form-data".toMediaTypeOrNull(), file)
            val body: MultipartBody.Part = MultipartBody.Part.createFormData("avatarFile", file.name, requestFile)

      /**
         * 上传头像
         */
        @POST("test-api/system/user/avatar/update")
        @Multipart
        fun updateHead(@Part file: MultipartBody.Part): Observable<HttpResult<UpdateHeadBean>>
